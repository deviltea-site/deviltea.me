var e=Object.defineProperty,n=Object.defineProperties,a=Object.getOwnPropertyDescriptors,s=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,t=Object.prototype.propertyIsEnumerable,p=(n,a,s)=>a in n?e(n,a,{enumerable:!0,configurable:!0,writable:!0,value:s}):n[a]=s,c=(e,n)=>{for(var a in n||(n={}))o.call(n,a)&&p(e,a,n[a]);if(s)for(var a of s(n))t.call(n,a)&&p(e,a,n[a]);return e},l=(e,s)=>n(e,a(s));import{_ as r}from"./bx-anchor.00bc73a3.js";import{o as i,c as u,a as h,x as k,F as d,y as b,C as y}from"./vendor.cf293871.js";const g={title:"Type Challenges Notes - Easy 篇",description:"練習作答 Type Challenges 的一些筆記，Easy 難度的部分",tags:["TypeScript","Type Challenges","筆記"],publishedDate:16206624e5},x=[{level:"2",content:'<a class="header-anchor" href="#%E5%89%8D%E8%A8%80" @click.prevent="$router.push({ ...$route, hash: &apos;#%E5%89%8D%E8%A8%80&apos; })"><icon-bx-bx-anchor></icon-bx-bx-anchor></a> &#x524D;&#x8A00;'},{level:"2",content:'<a class="header-anchor" href="#%E6%9C%AC%E6%96%87" @click.prevent="$router.push({ ...$route, hash: &apos;#%E6%9C%AC%E6%96%87&apos; })"><icon-bx-bx-anchor></icon-bx-bx-anchor></a> &#x672C;&#x6587;'},{level:"3",content:'<a class="header-anchor" href="#easy" @click.prevent="$router.push({ ...$route, hash: &apos;#easy&apos; })"><icon-bx-bx-anchor></icon-bx-bx-anchor></a> Easy'},{level:"4",content:'<a class="header-anchor" href="#pick" @click.prevent="$router.push({ ...$route, hash: &apos;#pick&apos; })"><icon-bx-bx-anchor></icon-bx-bx-anchor></a> <a href="https://github.com/type-challenges/type-challenges/blob/master/questions/4-easy-pick/README.md" class="external-link" target="_blank" rel="noopener noreferrer">Pick</a>'},{level:"4",content:'<a class="header-anchor" href="#readonly" @click.prevent="$router.push({ ...$route, hash: &apos;#readonly&apos; })"><icon-bx-bx-anchor></icon-bx-bx-anchor></a> <a href="https://github.com/type-challenges/type-challenges/blob/master/questions/7-easy-readonly/README.md" class="external-link" target="_blank" rel="noopener noreferrer">Readonly</a>'},{level:"4",content:'<a class="header-anchor" href="#tuple-to-object" @click.prevent="$router.push({ ...$route, hash: &apos;#tuple-to-object&apos; })"><icon-bx-bx-anchor></icon-bx-bx-anchor></a> <a href="https://github.com/type-challenges/type-challenges/blob/master/questions/11-easy-tuple-to-object/README.md" class="external-link" target="_blank" rel="noopener noreferrer">Tuple to Object</a>'},{level:"4",content:'<a class="header-anchor" href="#first-of-array" @click.prevent="$router.push({ ...$route, hash: &apos;#first-of-array&apos; })"><icon-bx-bx-anchor></icon-bx-bx-anchor></a> <a href="https://github.com/type-challenges/type-challenges/blob/master/questions/14-easy-first/README.md" class="external-link" target="_blank" rel="noopener noreferrer">First of Array</a>'},{level:"4",content:'<a class="header-anchor" href="#length-of-tuple" @click.prevent="$router.push({ ...$route, hash: &apos;#length-of-tuple&apos; })"><icon-bx-bx-anchor></icon-bx-bx-anchor></a> <a href="https://github.com/type-challenges/type-challenges/blob/master/questions/18-easy-tuple-length/README.md" class="external-link" target="_blank" rel="noopener noreferrer">Length of Tuple</a>'},{level:"4",content:'<a class="header-anchor" href="#exclude" @click.prevent="$router.push({ ...$route, hash: &apos;#exclude&apos; })"><icon-bx-bx-anchor></icon-bx-bx-anchor></a> <a href="https://github.com/type-challenges/type-challenges/blob/master/questions/43-easy-exclude/README.md" class="external-link" target="_blank" rel="noopener noreferrer">Exclude</a>'},{level:"4",content:'<a class="header-anchor" href="#awaited" @click.prevent="$router.push({ ...$route, hash: &apos;#awaited&apos; })"><icon-bx-bx-anchor></icon-bx-bx-anchor></a> <a href="https://github.com/type-challenges/type-challenges/blob/master/questions/189-easy-awaited/README.md" class="external-link" target="_blank" rel="noopener noreferrer">Awaited</a>'},{level:"4",content:'<a class="header-anchor" href="#if" @click.prevent="$router.push({ ...$route, hash: &apos;#if&apos; })"><icon-bx-bx-anchor></icon-bx-bx-anchor></a> <a href="https://github.com/type-challenges/type-challenges/blob/master/questions/268-easy-if/README.md" class="external-link" target="_blank" rel="noopener noreferrer">If</a>'},{level:"4",content:'<a class="header-anchor" href="#concat" @click.prevent="$router.push({ ...$route, hash: &apos;#concat&apos; })"><icon-bx-bx-anchor></icon-bx-bx-anchor></a> <a href="https://github.com/type-challenges/type-challenges/blob/master/questions/533-easy-concat/README.md" class="external-link" target="_blank" rel="noopener noreferrer">Concat</a>'},{level:"4",content:'<a class="header-anchor" href="#includes" @click.prevent="$router.push({ ...$route, hash: &apos;#includes&apos; })"><icon-bx-bx-anchor></icon-bx-bx-anchor></a> <a href="https://github.com/type-challenges/type-challenges/blob/master/questions/898-easy-includes/README.md" class="external-link" target="_blank" rel="noopener noreferrer">Includes</a>'},{level:"2",content:'<a class="header-anchor" href="#%E5%BE%8C%E8%A8%98" @click.prevent="$router.push({ ...$route, hash: &apos;#%E5%BE%8C%E8%A8%98&apos; })"><icon-bx-bx-anchor></icon-bx-bx-anchor></a> &#x5F8C;&#x8A18;'}],f={id:"%E5%89%8D%E8%A8%80",tabindex:"-1"},m=b(" 前言"),E=h("p",null,[b("這是一篇關於 "),h("a",{href:"https://tsch.js.org/",class:"external-link",target:"_blank",rel:"noopener noreferrer"},"Type Challenges"),b(" 作答時的一些筆記，「Type Challenges」 是什麼呢？有鑒於 TS 在前端世界裡越來越盛行，似乎已成為熱門必備技能，而 TS 中的型別系統也是日益完備與強大，除了基本的使用 type / interface 已經讓我嗅到了不足的味道，是時候來腳踏實地的練習運用 TS 型別系統了！")],-1),T={id:"%E6%9C%AC%E6%96%87",tabindex:"-1"},v=b(" 本文"),$=h("p",null,[b("在 Type Challenges 該 Repo 中的 README 中就有提供一份由難易度分類的"),h("a",{href:"https://github.com/type-challenges/type-challenges/blob/master/README.md#challenges",class:"external-link",target:"_blank",rel:"noopener noreferrer"},"清單"),b("可供挑戰，並且作答時會有建立好的 TS Playground 使用，也有 github issues 中的其他參與者答案可以參考學習，可謂是非常貼心！")],-1),w={id:"easy",tabindex:"-1"},C=b(" Easy"),A={id:"pick",tabindex:"-1"},D=b(),M=h("a",{href:"https://github.com/type-challenges/type-challenges/blob/master/questions/4-easy-pick/README.md",class:"external-link",target:"_blank",rel:"noopener noreferrer"},"Pick",-1),R=y('<ul><li>答案：<pre class="code-block language-ts"><code><span class="token keyword">type</span> <span class="token class-name">MyPick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></li><li>筆記：<br> 首先約束 <code>K</code> 須為 <code>T</code> 的 key，接著定義 Mapped Type 令 key <code>P</code> 在 <code>K</code> 之中且 value 為 <code>T[P]</code></li></ul>',1),_={id:"readonly",tabindex:"-1"},q=b(),j=h("a",{href:"https://github.com/type-challenges/type-challenges/blob/master/questions/7-easy-readonly/README.md",class:"external-link",target:"_blank",rel:"noopener noreferrer"},"Readonly",-1),P=y('<ul><li>答案：<pre class="code-block language-ts"><code><span class="token keyword">type</span> <span class="token class-name">MyReadonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></li><li>筆記：<br> 定義 Mapped Type，先加上 readonly，令 key <code>K</code> 為 keyof <code>T</code>，value 為 <code>T[K]</code></li></ul>',1),K={id:"tuple-to-object",tabindex:"-1"},O=b(),U=h("a",{href:"https://github.com/type-challenges/type-challenges/blob/master/questions/11-easy-tuple-to-object/README.md",class:"external-link",target:"_blank",rel:"noopener noreferrer"},"Tuple to Object",-1),F=y('<ul><li>答案：<pre class="code-block language-ts"><code><span class="token keyword">type</span> <span class="token class-name">TupleToObject<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">readonly</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></li><li>筆記：<br> 由於 <code>T</code> 為唯讀的陣列因此可推斷為 TS 中的 tuple，這就代表 <code>T[number]</code> 是可以推斷對應的值，所以令 Mapped Type 的 key 為 <code>K</code> 並存在於 <code>T[number]</code> 之中，且令 value 為 <code>K</code></li></ul>',1),I={id:"first-of-array",tabindex:"-1"},S=b(),B=h("a",{href:"https://github.com/type-challenges/type-challenges/blob/master/questions/14-easy-first/README.md",class:"external-link",target:"_blank",rel:"noopener noreferrer"},"First of Array",-1),L=y('<ul><li>答案：<pre class="code-block language-ts"><code><span class="token keyword">type</span> <span class="token class-name">First<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">never</span></span>\n  <span class="token operator">?</span> <span class="token builtin">never</span>\n  <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n</code></pre></li><li>筆記：<br> 先約束若 <code>T[number]</code> 為 never，即陣列為空應返回 <code>never</code>，否則返回 <code>T[0]</code></li></ul>',1),N={id:"length-of-tuple",tabindex:"-1"},z=b(),G=h("a",{href:"https://github.com/type-challenges/type-challenges/blob/master/questions/18-easy-tuple-length/README.md",class:"external-link",target:"_blank",rel:"noopener noreferrer"},"Length of Tuple",-1),H=y('<ul><li>答案：<pre class="code-block language-ts"><code><span class="token keyword">type</span> <span class="token class-name">Length<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">readonly</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span>\n</code></pre></li><li>筆記：<br> 讓 <code>T</code> 限制為唯讀 <code>any[]</code>，讓型別推斷可推斷出 <code>T[&#39;lemgth&#39;]</code></li></ul>',1),J={id:"exclude",tabindex:"-1"},Q=b(),V=h("a",{href:"https://github.com/type-challenges/type-challenges/blob/master/questions/43-easy-exclude/README.md",class:"external-link",target:"_blank",rel:"noopener noreferrer"},"Exclude",-1),W=y('<ul><li>答案：<pre class="code-block language-ts"><code><span class="token keyword">type</span> <span class="token class-name">MyExclude<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">T</span>\n</code></pre></li><li>筆記：<br> 若 <code>T</code> 包含於 <code>U</code>，返回 <code>never</code> 否則返回 <code>T</code></li></ul>',1),X={id:"awaited",tabindex:"-1"},Y=b(),Z=h("a",{href:"https://github.com/type-challenges/type-challenges/blob/master/questions/189-easy-awaited/README.md",class:"external-link",target:"_blank",rel:"noopener noreferrer"},"Awaited",-1),ee=y('<ul><li>答案：<pre class="code-block language-ts"><code><span class="token keyword">type</span> <span class="token class-name">Awaited<span class="token operator">&lt;</span><span class="token constant">P</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">P</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Promise</span><span class="token operator">&lt;</span>infer <span class="token constant">T</span><span class="token operator">&gt;</span></span>\n  <span class="token operator">?</span> <span class="token constant">T</span>\n  <span class="token operator">:</span> <span class="token builtin">never</span>\n</code></pre></li><li>筆記：<br> 使用 <a href="https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#inferring-within-conditional-types" class="external-link" target="_blank" rel="noopener noreferrer">infer</a> 在條件式保持推斷，在這題用來判斷型別是否繼承 <code>Promise</code> 並推斷 <code>Promise&lt;T&gt;</code> 的 <code>T</code> 應該為什麽型別</li></ul>',1),ne={id:"if",tabindex:"-1"},ae=b(),se=h("a",{href:"https://github.com/type-challenges/type-challenges/blob/master/questions/268-easy-if/README.md",class:"external-link",target:"_blank",rel:"noopener noreferrer"},"If",-1),oe=y('<ul><li>答案：<pre class="code-block language-ts"><code><span class="token keyword">type</span> <span class="token class-name">If<span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token keyword">extends</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">F</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">C</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token constant">F</span>\n</code></pre></li><li>筆記：<br> 先約束 <code>C</code> 為 <code>boolean</code> 及非 <code>true</code> 則 <code>false</code>，後面就簡單了，<code>C</code> 為 <code>true</code> 返回 <code>T</code>，反之為 <code>F</code></li></ul>',1),te={id:"concat",tabindex:"-1"},pe=b(),ce=h("a",{href:"https://github.com/type-challenges/type-challenges/blob/master/questions/533-easy-concat/README.md",class:"external-link",target:"_blank",rel:"noopener noreferrer"},"Concat",-1),le=y('<ul><li>答案：<pre class="code-block language-ts"><code><span class="token keyword">type</span> <span class="token class-name">Concat<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">U</span><span class="token punctuation">]</span>\n</code></pre></li><li>筆記：<br> 約束 <code>T</code>、<code>U</code> 為 array / tuple，就可以使用概念接近擴展符號的方法去串起 <code>T</code>、<code>U</code> 所有型別</li></ul>',1),re={id:"includes",tabindex:"-1"},ie=b(),ue=h("a",{href:"https://github.com/type-challenges/type-challenges/blob/master/questions/898-easy-includes/README.md",class:"external-link",target:"_blank",rel:"noopener noreferrer"},"Includes",-1),he=y('<ul><li>答案：<pre class="code-block language-ts"><code><span class="token keyword">type</span> <span class="token class-name">Includes<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">readonly</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">T</span></span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n</code></pre></li><li>筆記：<br><code>T</code> 被約束為 <code>readonly any[]</code> (tuple)，利用此點可進行 <code>U extends T[number]</code> 條件推斷</li></ul>',1),ke={id:"%E5%BE%8C%E8%A8%98",tabindex:"-1"},de=b(" 後記"),be=h("p",null,[b("在這篇先整理跟作答完 "),h("code",null,"Easy"),b(" 難度的所有題目，對於原本只會使用基礎型別的我來說算是滿不錯的暖身練習，也算是基本的摸了摸 "),h("code",null,"Mapped Type"),b("、"),h("code",null,"Conditional Type"),b(" 等等的知識，截至為止也做了一部分的 "),h("code",null,"Medium"),b(" 難度的題目，難度一下就提了上來（汗，不過也讓我刷新眼界，TS 的型別系統真的很酷 😄")],-1);function ye(e,n){const a=r;return i(),u(d,null,[h("h2",f,[h("a",{class:"header-anchor",href:"#%E5%89%8D%E8%A8%80",onClick:n[1]||(n[1]=k((n=>e.$router.push(l(c({},e.$route),{hash:"#%E5%89%8D%E8%A8%80"}))),["prevent"]))},[h(a)]),m]),E,h("h2",T,[h("a",{class:"header-anchor",href:"#%E6%9C%AC%E6%96%87",onClick:n[2]||(n[2]=k((n=>e.$router.push(l(c({},e.$route),{hash:"#%E6%9C%AC%E6%96%87"}))),["prevent"]))},[h(a)]),v]),$,h("h3",w,[h("a",{class:"header-anchor",href:"#easy",onClick:n[3]||(n[3]=k((n=>e.$router.push(l(c({},e.$route),{hash:"#easy"}))),["prevent"]))},[h(a)]),C]),h("h4",A,[h("a",{class:"header-anchor",href:"#pick",onClick:n[4]||(n[4]=k((n=>e.$router.push(l(c({},e.$route),{hash:"#pick"}))),["prevent"]))},[h(a)]),D,M]),R,h("h4",_,[h("a",{class:"header-anchor",href:"#readonly",onClick:n[5]||(n[5]=k((n=>e.$router.push(l(c({},e.$route),{hash:"#readonly"}))),["prevent"]))},[h(a)]),q,j]),P,h("h4",K,[h("a",{class:"header-anchor",href:"#tuple-to-object",onClick:n[6]||(n[6]=k((n=>e.$router.push(l(c({},e.$route),{hash:"#tuple-to-object"}))),["prevent"]))},[h(a)]),O,U]),F,h("h4",I,[h("a",{class:"header-anchor",href:"#first-of-array",onClick:n[7]||(n[7]=k((n=>e.$router.push(l(c({},e.$route),{hash:"#first-of-array"}))),["prevent"]))},[h(a)]),S,B]),L,h("h4",N,[h("a",{class:"header-anchor",href:"#length-of-tuple",onClick:n[8]||(n[8]=k((n=>e.$router.push(l(c({},e.$route),{hash:"#length-of-tuple"}))),["prevent"]))},[h(a)]),z,G]),H,h("h4",J,[h("a",{class:"header-anchor",href:"#exclude",onClick:n[9]||(n[9]=k((n=>e.$router.push(l(c({},e.$route),{hash:"#exclude"}))),["prevent"]))},[h(a)]),Q,V]),W,h("h4",X,[h("a",{class:"header-anchor",href:"#awaited",onClick:n[10]||(n[10]=k((n=>e.$router.push(l(c({},e.$route),{hash:"#awaited"}))),["prevent"]))},[h(a)]),Y,Z]),ee,h("h4",ne,[h("a",{class:"header-anchor",href:"#if",onClick:n[11]||(n[11]=k((n=>e.$router.push(l(c({},e.$route),{hash:"#if"}))),["prevent"]))},[h(a)]),ae,se]),oe,h("h4",te,[h("a",{class:"header-anchor",href:"#concat",onClick:n[12]||(n[12]=k((n=>e.$router.push(l(c({},e.$route),{hash:"#concat"}))),["prevent"]))},[h(a)]),pe,ce]),le,h("h4",re,[h("a",{class:"header-anchor",href:"#includes",onClick:n[13]||(n[13]=k((n=>e.$router.push(l(c({},e.$route),{hash:"#includes"}))),["prevent"]))},[h(a)]),ie,ue]),he,h("h2",ke,[h("a",{class:"header-anchor",href:"#%E5%BE%8C%E8%A8%98",onClick:n[14]||(n[14]=k((n=>e.$router.push(l(c({},e.$route),{hash:"#%E5%BE%8C%E8%A8%98"}))),["prevent"]))},[h(a)]),de]),be],64)}const ge={render:ye,__hmrId:"/home/runner/work/deviltea.me/deviltea.me/posts/type-challenges.md"},xe=e=>({components:e,render:ye});export{ge as VueComponent,xe as VueComponentWith,g as attributes,x as toc};
