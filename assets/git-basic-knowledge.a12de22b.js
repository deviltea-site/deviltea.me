import{A as e}from"./vendor.6d59d952.js";const t={filename:"/Users/deviltea/Documents/Programming/vite-vue-blog/posts/git-basic-knowledge.md",title:"Git 基礎筆記",description:"記錄一些基礎觀念跟常用指令",tags:["Git","筆記"],publishedDate:1622957310155},l=[{level:"2",content:"What &#x2CA;owO&#x2CB;&#xFF1F;"},{level:"3",content:"&#x7248;&#x672C;&#x63A7;&#x5236;&#xFF1F;"},{level:"2",content:"Why &#x2CA;&#x2D9;_&#x2D9;&#x2CB;&#xFF1F;"},{level:"3",content:"&#x70BA;&#x4E86;&#x4EC0;&#x9EBC;&#x4F5C;&#x7248;&#x63A7;&#xFF1F;"},{level:"3",content:"&#x7248;&#x672C;&#x63A7;&#x5236;&#x7684;&#x65B9;&#x5F0F;&#xFF1F;"},{level:"4",content:"&#x795E;&#x5947;&#x7684;&#x7248;&#x63A7;&#x65B9;&#x6CD5;"},{level:"4",content:"&#x4E2D;&#x592E;&#x5F0F;&#x7CFB;&#x7D71;"},{level:"4",content:"&#x5206;&#x6563;&#x5F0F;&#x7CFB;&#x7D71;"},{level:"3",content:"&#x6240;&#x4EE5;&#x6211;&#x5011;&#x9078;&#x64C7;&#x4F7F;&#x7528; Git&#xFF01;"},{level:"2",content:"When &#x2CA;&#xFF20;w&#xFF20;&#x2CB;&#xFF1F;"},{level:"2",content:"How &#x2CA;&#x2D9;o&#x2D9;&#x2CB;&#xFF1F;"},{level:"3",content:"&#x5E38;&#x898B; Terminal &#x6307;&#x4EE4;&#x4ECB;&#x7D39;"},{level:"3",content:"Git &#x57FA;&#x790E;&#x6982;&#x5FF5;"},{level:"3",content:"Git &#x7D00;&#x9304;&#x7684;&#x7D50;&#x69CB;"},{level:"3",content:"Git &#x57FA;&#x790E;&#x5E38;&#x7528;&#x547D;&#x4EE4;"}],i=e('<h2 id="what-%CB%8Aowo%CB%8B%EF%BC%9F">What ˊowOˋ？</h2><h3 id="%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%EF%BC%9F">版本控制？</h3><p>版本控制是一個能夠記錄一個或一組檔案在某一段時間的變更，使得使用者以後能取回特定版本的系統。</p><h2 id="why-%CB%8A%CB%99_%CB%99%CB%8B%EF%BC%9F">Why ˊ˙_˙ˋ？</h2><h3 id="%E7%82%BA%E4%BA%86%E4%BB%80%E9%BA%BC%E4%BD%9C%E7%89%88%E6%8E%A7%EF%BC%9F">為了什麼作版控？</h3><p>為了以後能取回特定的版本，以及多人協作時大家的版本管理。</p><h3 id="%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%9A%84%E6%96%B9%E5%BC%8F%EF%BC%9F">版本控制的方式？</h3><h4 id="%E7%A5%9E%E5%A5%87%E7%9A%84%E7%89%88%E6%8E%A7%E6%96%B9%E6%B3%95">神奇的版控方法</h4><p>上傳雲端？用另一份文件記錄別的文件的變動？</p><h4 id="%E4%B8%AD%E5%A4%AE%E5%BC%8F%E7%B3%BB%E7%B5%B1">中央式系統</h4><p>所有版本控制的工作在一個伺服器進行，由中央權威管理存取權限「鎖上」檔案庫中的檔案，一次只讓一個開發者工作。</p><h4 id="%E5%88%86%E6%95%A3%E5%BC%8F%E7%B3%BB%E7%B5%B1">分散式系統</h4><p>開發者直接在各自的本地檔案庫工作，並容許多個開發者同時更動同一檔案，而各個檔案庫有另一個合併各個改變的功能。這個方式讓開發者能不靠網路也能繼續工作，也讓開發者有充分的版本控制能力，而不需經中央權威許可。</p><h3 id="%E6%89%80%E4%BB%A5%E6%88%91%E5%80%91%E9%81%B8%E6%93%87%E4%BD%BF%E7%94%A8-git%EF%BC%81">所以我們選擇使用 Git！</h3><h2 id="when-%CB%8A%EF%BC%A0w%EF%BC%A0%CB%8B%EF%BC%9F">When ˊ＠w＠ˋ？</h2><p>當你所要記錄的版本變更是文字檔而不是 Binary 檔案的時候</p><h2 id="how-%CB%8A%CB%99o%CB%99%CB%8B%EF%BC%9F">How ˊ˙o˙ˋ？</h2><h3 id="%E5%B8%B8%E8%A6%8B-terminal-%E6%8C%87%E4%BB%A4%E4%BB%8B%E7%B4%B9">常見 Terminal 指令介紹</h3><ul><li><code>ls [-la]</code>：列出當前目錄下的檔案 / 資料夾（加上 <code>-la</code> 會顯示更詳細的資訊）</li><li><code>cd &lt;path to directory&gt;</code>：移動到Ｊㄍ <code>&lt;path to directory&gt;</code> 路徑的目錄</li><li><code>mkdir &lt;directory name&gt;</code>：在當前目錄下創建名為 <code>&lt;directory name&gt;</code> 的資料夾</li></ul><h3 id="git-%E5%9F%BA%E7%A4%8E%E6%A6%82%E5%BF%B5">Git 基礎概念</h3><p><img src="https://i.imgur.com/YdljEg0.png" alt></p><ol><li><p>working directory（工作區）：</p><ul><li>尚未被記錄或暫存下來的變更</li><li>透過 <code>git add &lt;file name&gt;</code> 將指定的變更暫存下來</li></ul></li><li><p>staging area（暫存區）：</p><ul><li>暫存變更的區域</li><li>透過 <code>git commit -m &quot;&lt; commit message&gt;&quot;</code> 將當前暫存區內所有變更打包成一個版本，紀錄進本地儲存庫</li></ul></li><li><p>local repo（本地儲存庫）：</p><ul><li>儲存每個版本紀錄的地方</li><li>透過 <code>git push &lt;remote&gt; &lt;branch&gt;</code> 將本地儲存庫推到遠端儲存庫</li></ul></li><li><p>remote repo（遠端儲存庫）：</p><ul><li>由遠端伺服器所託管的儲存庫</li></ul></li></ol><h3 id="git-%E7%B4%80%E9%8C%84%E7%9A%84%E7%B5%90%E6%A7%8B">Git 紀錄的結構</h3><p><img src="https://i.imgur.com/ryyqvSa.png" alt></p><ul><li>Commit：這些球球都是一個個版本紀錄</li><li>Branch：每條線都是一條條分支</li></ul><h3 id="git-%E5%9F%BA%E7%A4%8E%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4">Git 基礎常用命令</h3><ul><li><code>git config --global user.name &quot;&lt;GitHub Username&gt;&quot;</code>：設定全域使用者名稱 (同 GitHub 的就好)</li><li><code>git config --global user.email &quot;&lt;GitHub email&gt;&quot;</code>：設定全域使用者信箱 (同 GitHub 的就好)</li><li><code>git init</code>：在當前目錄下初始化出一個空的本地儲存庫</li><li><code>git status</code>：查看當前工作區與暫存區狀態</li><li><code>git log</code>：查看當前本地儲存庫的 commit 紀錄</li><li><code>git reflog</code>：查看過去 HEAD 指向過去的 commit 清單</li><li><code>git add &lt;file name&gt;</code>：將 <code>&lt;file name&gt;</code> 的變更放入暫存區</li><li><code>git commit -m &quot;&lt;message&gt;&quot;</code>：將當前暫存區中的所有變更打包成一個版本，並附加版本敘述訊息，紀錄進本地儲存庫</li><li><code>git branch &lt;branch name&gt;</code>：創建名為 <code>&lt;branch name&gt;</code> 的分支</li><li><code>git branch -D &lt;branch name&gt;</code>：刪除名為 <code>&lt;branch name&gt;</code> 的分支</li><li><code>git checkout &lt;branch name&gt;</code>：切換到名為 <code>&lt;branch name&gt;</code> 的分支</li><li><code>git checkout &lt;file name&gt;</code>：放棄在工作區中名為 <code>&lt;file name&gt;</code> 檔案的所有變更</li><li><code>git merge &lt;target branch&gt;</code>：將名為 <code>&lt;target branch&gt;</code> 的 分支合併到當前所在的分支</li><li><code>git push &lt;remote&gt; &lt;branch&gt;</code>：將本地儲存庫的狀態推到遠端儲存庫</li><li><code>git pull &lt;remote&gt; &lt;branch&gt;</code>：將遠端儲存庫的狀態拉到本地儲存庫</li><li><code>git reset</code>：將暫存區變更退回工作區</li><li><code>git reset [--mixed/--soft/--hard] &lt;commit&gt;</code>：挪動本地儲存庫 HEAD 指向的位置 <ul><li><code>mixed</code>：將指向位置相對未來紀錄的變更退回工作區</li><li><code>soft</code>：將指向位置相對未來紀錄的變更退回暫存區</li><li><code>hard</code>：將指向位置相對未來紀錄的變更消滅到連渣都不剩（不過其實還有救）</li></ul></li><li><code>git revert &lt;commit&gt;</code>：將指定的 commit 做反向操作並留下一筆紀錄</li><li><code>git rebase &lt;source branch&gt;</code>：將當前所在的分支的根節點挪到名為 <code>&lt;source branch&gt;</code> 的分支葉節點上Ｆ</li></ul>',27);function o(e,t){return i}const c={render:o,__hmrId:"/home/runner/work/deviltea.me/deviltea.me/posts/git-basic-knowledge.md"},d=e=>({components:e,render:o});export{c as VueComponent,d as VueComponentWith,t as attributes,l as toc};
